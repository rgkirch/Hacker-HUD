#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "grid.hpp"
#include <string>
#include <vector>

using ::testing::A;
using ::testing::StrictMock;
using ::testing::AtLeast;
using ::testing::Invoke;
using ::testing::InvokeWithoutArgs;
using ::testing::Matcher;
using ::testing::Return;
using ::testing::StrEq;
using ::testing::_;

using std::string;
using std::vector;

//template<class InputIt, class OutputIt, class UnaryOperation>
//OutputIt transform(InputIt first1, InputIt last1, OutputIt d_first, UnaryOperation unary_op) {
//    while (first1 != last1) {
//        *d_first++ = unary_op(*first1++);
//    }
//    return d_first;
//}

//TEST(grid, one) {
//    BarGraph grid(20, 2);
//    vector<int> vec {1,3,7,15,31,1,3,7,15,31, 1,3,7,15,31,1,3,7,15,31, 1,3,7,15,31,1,3,7,15,31, 1,3,7,15,31,1,3,7,15,31};
//    auto chars = grid.toChars(vec);
//    auto msg = grid.set(chars, [](char c){ myVFD.print(c); });
//    grid.print([](char c){ });
//}

TEST(grid, transform) {
    string sampleJson {R"cocksucker!({"bpi":{"2017-05-15":1697.3788,"2017-05-16":1718.2013,"2017-05-17":1802.1638,"2017-05-18":1887.3263,"2017-05-19":1968.1025,"2017-05-20":2051.735,"2017-05-21":2055.6175,"2017-05-22":2139.0275,"2017-05-23":2291.4775,"2017-05-24":2476.2963,"2017-05-25":2357.5038,"2017-05-26":2247.4825,"2017-05-27":2106.3075,"2017-05-28":2207.5775,"2017-05-29":2289.87,"2017-05-30":2197.2338,"2017-05-31":2330.2338,"2017-06-01":2452.1813,"2017-06-02":2517.4088,"2017-06-03":2555.6538,"2017-06-04":2552.8088,"2017-06-05":2736.595,"2017-06-06":2914.0825,"2017-06-07":2694.2188,"2017-06-08":2825.0313,"2017-06-09":2826.7,"2017-06-10":2942.345,"2017-06-11":3018.545,"2017-06-12":2682.595,"2017-06-13":2738.9313,"2017-06-14":2494.485,"2017-06-15":2456.9238,"2017-06-16":2528.1025,"2017-06-17":2663.9975,"2017-06-18":2576.1713,"2017-06-19":2641.665,"2017-06-20":2778.8275,"2017-06-21":2712.1575,"2017-06-22":2740.79,"2017-06-23":2738.2138},"disclaimer":"This data was produced from the CoinDesk Bitcoin Price Index. BPI value data returned as USD.","time":{"updated":"Jun 25, 2017 00:03:00 UTC","updatedISO":"2017-06-25T00:03:00+00:00"}})cocksucker!"};
    vector<double> expected {1697.3788,1718.2013,1802.1638,1887.3263,1968.1025,2051.735,2055.6175,2139.0275,2291.4775,2476.2963,2357.5038,2247.4825,2106.3075,2207.5775,2289.87,2197.2338,2330.2338,2452.1813,2517.4088,2555.6538,2552.8088,2736.595,2914.0825,2694.2188,2825.0313,2826.7,2942.345,3018.545,2682.595,2738.9313,2494.485,2456.9238,2528.1025,2663.9975,2576.1713,2641.665,2778.8275,2712.1575,2740.79,2738.2138};
    auto result = parseThatJsonToDoubles(sampleJson);
    ASSERT_EQ(expected, result);
}

//TEST(grid, two) {
//    string sampleJson {R"cocksucker!({"bpi":{"2017-05-15":1697.3788,"2017-05-16":1718.2013,"2017-05-17":1802.1638,"2017-05-18":1887.3263,"2017-05-19":1968.1025,"2017-05-20":2051.735,"2017-05-21":2055.6175,"2017-05-22":2139.0275,"2017-05-23":2291.4775,"2017-05-24":2476.2963,"2017-05-25":2357.5038,"2017-05-26":2247.4825,"2017-05-27":2106.3075,"2017-05-28":2207.5775,"2017-05-29":2289.87,"2017-05-30":2197.2338,"2017-05-31":2330.2338,"2017-06-01":2452.1813,"2017-06-02":2517.4088,"2017-06-03":2555.6538,"2017-06-04":2552.8088,"2017-06-05":2736.595,"2017-06-06":2914.0825,"2017-06-07":2694.2188,"2017-06-08":2825.0313,"2017-06-09":2826.7,"2017-06-10":2942.345,"2017-06-11":3018.545,"2017-06-12":2682.595,"2017-06-13":2738.9313,"2017-06-14":2494.485,"2017-06-15":2456.9238,"2017-06-16":2528.1025,"2017-06-17":2663.9975,"2017-06-18":2576.1713,"2017-06-19":2641.665,"2017-06-20":2778.8275,"2017-06-21":2712.1575,"2017-06-22":2740.79,"2017-06-23":2738.2138},"disclaimer":"This data was produced from the CoinDesk Bitcoin Price Index. BPI value data returned as USD.","time":{"updated":"Jun 25, 2017 00:03:00 UTC","updatedISO":"2017-06-25T00:03:00+00:00"}})cocksucker!"};
//    vector<double> expected {1697.3788,1718.2013,1802.1638,1887.3263,1968.1025,2051.735,2055.6175,2139.0275,2291.4775,2476.2963,2357.5038,2247.4825,2106.3075,2207.5775,2289.87,2197.2338,2330.2338,2452.1813,2517.4088,2555.6538,2552.8088,2736.595,2914.0825,2694.2188,2825.0313,2826.7,2942.345,3018.545,2682.595,2738.9313,2494.485,2456.9238,2528.1025,2663.9975,2576.1713,2641.665,2778.8275,2712.1575,2740.79,2738.2138};
//    auto graphData = parseThatJson(sampleJson);
//    vector<double> data;
//    data.resize(graphData.size());
//    transform(begin(graphData), end(graphData), std::back_inserter(data), [](string s)->double{ return atof(s.c_str()); });
//    ASSERT_EQ(expected, data);
//}
